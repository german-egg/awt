#!/bin/bash

set -euo pipefail

version="20240801"

# Configuration variables
dev_branch="develop"
jira_ticket_url="https://eggcooperation.atlassian.net/browse"
repository="https://github.com/german-egg/awt"

# System variables
color='\033[1;93m'
color_accent='\033[1;96m'
color_error='\033[1;91m'

nc='\033[0m'

# Welcome message
welcome() {
    clear
    cat <<EOF
╭───────────────────────────────────────────────────────────────╮
│                                                               │
│            🥚 EGG Automation Workflow Task                    │
│                                                               │
│ v$version                                 by Germán Aliprandi │
╰───────────────────────────────────────────────────────────────╯

EOF
}

# Show "Invalid option" message with optional detailed message and wait 2 second
invalid_option() {
    local detailed_msg=${1:-}
    welcome
    echo -e "${color_error}Invalid option.${nc} Please try again."
    if [[ -n "$detailed_msg" ]]; then
        echo -e "${color}Details:${nc} $detailed_msg"
    fi
    echo
    sleep 2
}

# Get the new task type
new_task_render_type_option() {
    local task_type_options=("feat" "fix" "docs" "style" "refactor" "perf" "test" "chore")
    local task_type_options_desc=(
        "A new feature"
        "A bug fix"
        "Documentation only changes"
        "Changes that do not affect the meaning of the code"
        "A code change that neither fixes a bug nor adds a feature"
        "A code change that improves performance"
        "Adding missing or correcting existing tests"
        "Changes to the build process or auxiliary tools"
    )

    while true; do
        welcome
        echo -e "${color}Select the type of change that you're committing:${nc}\n"

        for ((i = 0; i < ${#task_type_options[@]}; i++)); do
            echo -e "${color}$((i + 1))) ${task_type_options[$i]}:${nc} ${task_type_options_desc[$i]}"
        done

        echo -e "\n${color}a) Advanced options${nc}"
        echo -e "${color}x) Exit${nc}\n"

        read -p "Choose a task type: " task_type

        case $task_type in
        [1-8])
            task_type=${task_type_options[$((task_type - 1))]}
            break
            ;;
        a)
            new_task_render_advanced_options
            break
            ;;
        x) exit 0 ;;
        *) invalid_option "Please enter a valid option." ;;
        esac
    done
}

# Get the new task Jira ticket ID
new_task_render_jira_ticket_id() {
    while true; do
        welcome
        echo -e "${color}Enter the Jira ticket ID:${nc}"
        echo -e "Format: EGG-123\n"
        read -p "Jira ticket ID: " jira_ticket_id

        jira_ticket_id=${jira_ticket_id^^}

        if [[ $jira_ticket_id =~ ^[A-Z]{3,4}-[0-9]+$ ]]; then
            break
        else
            invalid_option "Invalid format. Please enter a valid Jira ticket ID (e.g., EGG-123)."
        fi
    done
}

# Get the new task title
new_task_render_title() {
    while true; do
        welcome
        echo -e "${color}Enter the task title:${nc}\n"
        read -p "Task title: " task_title

        if [[ $task_title =~ ^[A-Za-z0-9\ \-\_]+$ ]]; then
            break
        else
            invalid_option "Task title can only contain letters, numbers, hyphens, underscores, and spaces."
        fi
    done
}

# Get the new task branch name
new_task_render_branch_name() {
    local suggested_branch="${task_type}/${jira_ticket_id,,}-${task_title// /-}"
    suggested_branch=${suggested_branch,,}

    while true; do
        welcome
        echo -e "${color}Enter the branch name:${nc}"
        echo -e "Suggestion: $suggested_branch\n"
        read -p "Branch name [Press Enter to use suggestion]: " branch_name

        if [[ -z "$branch_name" ]]; then
            branch_name="$suggested_branch"
        fi

        if [[ $branch_name =~ ^[A-Za-z0-9\-\_\/\.]{1,}$ ]]; then
            invalid_option "Branch name can only contain letters, numbers, hyphens, underscores, forward slashes, and dots."
            continue
        fi

        # Check if branch exists locally
        if git show-ref --quiet refs/heads/"$branch_name"; then
            echo -e "\n${color_error}Error:${nc} Branch '$branch_name' already exists locally."
            read -p "Do you want to use a different name? [Y/n]: " response
            [[ $response =~ ^[Nn]$ ]] && break || continue
        fi

        # Check if branch exists remotely
        if git ls-remote --exit-code --heads origin "$branch_name" &>/dev/null; then
            echo -e "\n${color_error}Error:${nc} Branch '$branch_name' already exists on the remote."
            read -p "Do you want to use a different name? [Y/n]: " response
            [[ $response =~ ^[Nn]$ ]] && break || continue
        fi

        break
    done

    echo -e "\n${color}Using branch name:${nc} $branch_name"
    sleep 2
}

# Show summary of next steps and wait for confirmation
new_task_render_summary() {
    local new_task_steps=(
        "Switch to ${dev_branch} branch"
        "Pull the latest changes from the remote repository"
        "Create a new branch named $branch_name"
        "Add an empty commit with the Jira ticket ID, URL and task title"
        "Update CHANGELOG.md with the Jira ticket ID, URL and task title and commit"
        "Push the new branch to the remote repository"
        "Open a draft pull request on GitHub to ${dev_branch} branch"
    )

    welcome
    echo -e "${color}Check the following steps and confirm:${nc}\n"
    for ((i = 0; i < ${#new_task_steps[@]}; i++)); do
        echo -e "$((i + 1)). ${new_task_steps[$i]}"
    done

    echo
    read -p "Confirm and continue? [y/n]: " confirm

    if [[ $confirm == "y" ]]; then
        new_task_execute
    else
        echo -e "\n${color}Task creation canceled.${nc}\n"
        exit 0
    fi
}

# Execute the new task creation, abort if any step fails
new_task_execute() {
    local steps=(
        "Switch to ${dev_branch} branch"
        "Pull the latest changes from the remote repository"
        "Create a new branch named $branch_name"
        "Add an empty commit with the Jira ticket ID, URL and task title"
        "Update CHANGELOG.md with the Jira ticket ID, URL and task title and commit"
        "Push the new branch to the remote repository"
        "Open a draft pull request on GitHub to ${dev_branch} branch"
    )

    local total_steps=${#steps[@]}

    for ((i = 0; i < total_steps; i++)); do
        clear
        welcome

        echo -e "${color}Task creation in progress...${nc}\n"

        for ((j = 0; j < i; j++)); do
            echo -e "✅ ${color}Step $((j + 1))/${total_steps}:${nc} ${steps[$j]}"
        done

        echo -e "⏳ ${color}Step $((i + 1))/${total_steps}:${nc} ${steps[$i]}"

        case $i in
        0) git switch "$dev_branch" || exit_with_error "${steps[$i]}" ;;
        1) git pull origin "$dev_branch" || exit_with_error "${steps[$i]}" ;;
        2) git checkout -b "$branch_name" || exit_with_error "${steps[$i]}" ;;
        3) git commit --allow-empty -m "$jira_ticket_id: $jira_ticket_url/$jira_ticket_id - $task_title" || exit_with_error "${steps[$i]}" ;;
        4)
            local change_log_line="- [$jira_ticket_id: $task_title]($jira_ticket_url/$jira_ticket_id)"
            local commit_message="$jira_ticket_id: $jira_ticket_url/$jira_ticket_id - $task_title"
            add_to_changelog "$change_log_line"
            git add CHANGELOG.md || exit_with_error "${steps[$i]}"
            git commit -m "$commit_message" || exit_with_error "${steps[$i]}"
            ;;
        5) git push origin "$branch_name" || exit_with_error "${steps[$i]}" ;;
        6)
            if gh pr create --draft --base "$dev_branch" --head "$branch_name" --title "$jira_ticket_id: $task_title" --body "This PR is related to $jira_ticket_id: $jira_ticket_url/$jira_ticket_id"; then
                echo -e "\n✅ ${color}Step $((i + 1))/${total_steps}:${nc} ${steps[$i]}"
            else
                echo -e "\n⚠️ ${color}We cannot automatically create the PR. Please create it manually.${nc}"
                echo -e "💡 If you want us to automatically create PRs, please install GitHub CLI from https://cli.github.com"
            fi
            ;;
        esac

        echo -e "\n✅ ${color}Step $((i + 1))/${total_steps}:${nc} ${steps[$i]}"
    done

    echo -e "\n${color}Task created successfully!${nc}\n"
    exit 0
}

# Add entry to CHANGELOG.md and create if not exists
add_to_changelog() {
    [[ ! -f CHANGELOG.md ]] && touch CHANGELOG.md
    echo "$1" | cat - CHANGELOG.md >temp && mv temp CHANGELOG.md || exit_with_error "Error adding entry to CHANGELOG.md"
}

# Advanced options: Show advanced options and wait for confirmation
new_task_render_advanced_options() {
    local advanced_options=(
        "Merge ${color}develop${nc} => ${color}staging${nc}"
        "Merge ${color}staging${nc} => ${color}demo${nc}"
        "Merge ${color}demo${nc} => ${color}main${nc}"
    )

    while true; do
        welcome
        echo -e "${color}Advanced options:${nc}\n"

        for ((i = 0; i < ${#advanced_options[@]}; i++)); do
            echo -e "${color}$((i + 1)))${nc} ${advanced_options[$i]}"
        done

        echo -e "\n${color}v) Show version${nc}"
        echo -e "${color}u) Update awt${nc}"
        echo -e "${color}x) Exit${nc}\n"
        read -p "Choose an option: " advanced_option

        case $advanced_option in
        1) merge_into develop staging ;;
        2) merge_into staging demo ;;
        3) merge_into demo main ;;
        u) update_script ;;
        v) show_version ;;
        x) exit 0 ;;
        *) invalid_option "Please enter a valid option." ;;
        esac
    done
}

# Advanced options: Merge branches
merge_into() {
    local source_branch="$1"
    local target_branch="$2"

    welcome
    echo -e "${color}Merging $source_branch into $target_branch...${nc}\n"

    git switch "$source_branch" || exit_with_error "Error switching to $source_branch"
    git pull origin "$source_branch" || exit_with_error "Error pulling $source_branch"
    git switch "$target_branch" || exit_with_error "Error switching to $target_branch"
    git pull origin "$target_branch" || exit_with_error "Error pulling $target_branch"
    git merge "$source_branch" || exit_with_error "Error merging $source_branch into $target_branch"
    git push origin "$target_branch" || exit_with_error "Error pushing $target_branch"

    echo -e "${color}Branches merged successfully!${nc}\n"
    read -p "Press Enter to continue..." -n 1 -r
}

# Advanced options: Update the script from https://raw.githubusercontent.com/german-egg/awt/main/awt
update_script() {
    welcome
    echo -e "${color}Updating the script...${nc}\n"

    curl -s https://raw.githubusercontent.com/german-egg/awt/main/awt >awt
    chmod +x awt

    echo -e "${color}Script updated successfully!${nc}\n"
    read -p "Press Enter to continue..." -n 1 -r
    exit 0
}

# Advanced options: Show the script version
show_version() {
    welcome
    echo -e "${color}Script version:${nc} $version\n"
    read -p "Press Enter to continue..." -n 1 -r
}

# Show error message and exit
exit_with_error() {
    echo -e "\n${color_error}⛔ Error:${nc} $1\n"
    exit 1
}

# Run each step for create a new development task
create_new_task() {
    new_task_render_type_option
    new_task_render_jira_ticket_id
    new_task_render_title
    new_task_render_branch_name
    new_task_render_summary
}

# Check if the script is running in a git repository
check_if_repository() {
    if ! git rev-parse --is-inside-work-tree &>/dev/null; then
        exit_with_error "The script must be run in a git repository."
    fi
}

# Check if Github CLI is installed and authenticated
check_github_cli() {
    command -v gh &>/dev/null || exit_with_error "GitHub CLI is not installed. Please install it from https://cli.github.com/"
    gh auth status &>/dev/null || exit_with_error "GitHub CLI is not authenticated. Please run 'gh auth login' to authenticate."
}

# Initialize the script
main() {
    welcome
    check_if_repository
    create_new_task
    # check_github_cli
}

# Render the advanced options
main "$@"
